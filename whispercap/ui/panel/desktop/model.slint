import { ListView } from "std-widgets.slint";
import { ModelSource, ModelStatus } from "../../store.slint";
import { Theme, Icons, Store, Logic } from "../def.slint";
import { Label, Tag, ElevatedBtn, IconBtn, CircleProgress, PopupActionSetting, CenterLayout, NoMessageImg, PopupActionEntry, ConfirmDialogSetting } from "../../base/widgets.slint";
import { Util } from "../../util.slint";

component HeadBar inherits HorizontalLayout {
    private property <[int]> statistics: Logic.model-statistics(Store.model-entries);

    alignment: space-between;

    HorizontalLayout {
        spacing: Theme.spacing * 10;

        Label {
            font-size: Theme.title3-font-size;
            font-weight: Theme.bold-font-weight;
            color: Theme.thirdly-brand-color;
            text: Logic.tr("Total") + ": " + statistics[0];
        }

        Label {
            font-size: Theme.title3-font-size;
            font-weight: Theme.bold-font-weight;
            color: Theme.success-color;
            text: Logic.tr("Network") + ": " + statistics[1];
        }

        Label {
            font-size: Theme.title3-font-size;
            font-weight: Theme.bold-font-weight;
            color: Theme.warning-color;
            text: Logic.tr("Local") + ": " + statistics[2];
        }
    }

    HorizontalLayout {
        alignment: end;
        spacing: Theme.spacing * 8;

        Rectangle {
            height: hbox.preferred-height;
            border-radius: self.height / 2;
            background: Theme.secondary-background;
            border-width: Theme.default-border-width;
            border-color: Theme.base-border-color;

            hbox := HorizontalLayout {
                spacing: Theme.spacing * 2;
                padding: Theme.padding * 2;
                padding-left: Theme.padding * 4;
                padding-right: Theme.padding * 4;

                HorizontalLayout {
                    spacing: Theme.spacing * 4;

                    private property <[PopupActionEntry]> download-entries: Logic.show-undownload-models();

                    if download-entries.length > 0: IconBtn {
                        is-show-tip: true;
                        tip: Logic.tr("download");
                        icon: Icons.download;
                        tip-position: Bottom;
                        hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                        clicked => {
                            PopupActionSetting.show(self.absolute-position.x + self.mouse-x + Theme.padding, self.absolute-position.y + self.mouse-y + Theme.padding, download-entries);
                        }
                    }

                    IconBtn {
                        is-show-tip: true;
                        tip: Logic.tr("manual download");
                        icon: Icons.browser-light;
                        tip-position: Bottom;
                        hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                        clicked => {
                            Logic.manual-download-model();
                        }
                    }

                    IconBtn {
                        is-show-tip: true;
                        tip: Logic.tr("import");
                        icon: Icons.import;
                        tip-position: Bottom;
                        hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                        clicked => {
                            Logic.import-model();
                        }
                    }
                }
            }
        }
    }
}

export component TableBody inherits ListView {
    private property <length> index-width;
    private property <length> name-width;
    private property <length> source-width;
    private property <length> status-width;
    private property <length> progress-width;
    private property <length> file-size-width;

    for entry[index] in Store.model-entries: vbox := VerticalLayout {
        private property <bool> is-hover;

        Rectangle {
            background: ta.has-hover ? Theme.checked-background : (Math.mod(index, 2) == 0 ? Theme.table-item-first : Theme.table-item-second);

            ta := TouchArea { }

            HorizontalLayout {
                spacing: Theme.spacing * 8;
                padding-left: Theme.padding * 4;
                padding-right: Theme.padding * 4;
                padding-top: Theme.padding * 3;
                padding-bottom: Theme.padding * 3;

                Label {
                    init => {
                        index-width = Math.max(self.preferred-width, index-width);
                    }

                    width: index-width;
                    text: index + 1;
                }

                Label {
                    init => {
                        name-width = Math.max(self.preferred-width, name-width);
                    }

                    width: name-width;
                    text: entry.name;
                }

                HorizontalLayout {
                    horizontal-stretch: 1;

                    Label {
                        text: entry.file-path;
                        overflow: elide;
                    }
                }

                if !entry.file-size.is-empty: VerticalLayout {
                    alignment: center;

                    Rectangle {
                        background: Theme.thirdly-brand-color;
                        width: file-size-lb.width + Theme.padding * 4;
                        height: file-size-lb.height + Theme.padding * 2;
                        border-radius: self.height / 2;

                        file-size-lb := Label {
                            init => {
                                file-size-width = Math.max(self.preferred-width, file-size-width);
                            }

                            width: file-size-width;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            text: entry.file-size;
                            color: Theme.light-text-color;
                        }
                    }
                }

                VerticalLayout {
                    alignment: center;

                    Rectangle {
                        background: Logic.model-source-color(entry.source);
                        width: source-lb.width + Theme.padding * 4;
                        height: source-lb.height + Theme.padding * 2;
                        border-radius: self.height / 2;

                        source-lb := Label {
                            init => {
                                source-width = Math.max(self.preferred-width, source-width);
                            }

                            width: source-width;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            text: Logic.model-source-str(entry.source);
                            color: Theme.light-text-color;
                        }
                    }
                }

                VerticalLayout {
                    alignment: center;

                    Rectangle {
                        background: Logic.model-status-color(entry.status);
                        width: state-lb.width + Theme.padding * 4;
                        height: state-lb.height + Theme.padding * 2;
                        border-radius: self.height / 2;

                        state-lb := Label {
                            init => {
                                status-width = Math.max(self.preferred-width, status-width);
                            }

                            changed text => {
                                status-width = Math.max(self.preferred-width, status-width);
                            }

                            width: status-width;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            text: Logic.model-status-str(entry.status);
                            color: Theme.light-text-color;
                        }
                    }
                }

                if entry.status == ModelStatus.Downloading: HorizontalLayout {
                    spacing: Theme.spacing * 4;

                    VerticalLayout {
                        alignment: center;
                        CircleProgress {
                            radius: Theme.icon-size * 0.8;
                            ring-width: Theme.padding;
                            font-size: Theme.default-font-size * 2 / 3;
                            finished-text: "100%";
                            finished-text-color: self.unfinished-text-color;
                            finished-text-background: self.unfinished-progress-color;
                            finished-progress-color: Theme.success-color;
                            progress: entry.progress;
                            height: self.width;
                        }
                    }

                    ElevatedBtn {
                        icon: Icons.stop;
                        colorize: Theme.danger-color;
                        gain-focus-when-clicked: false;
                        is-show-tip: true;
                        tip-position: Bottom;
                        tip: Logic.tr("cancel");

                        clicked => {
                            Logic.cancel-download-model(index);
                        }
                    }
                }

                if entry.source == ModelSource.Network && (entry.status == ModelStatus.DownloadFailed || entry.status == ModelStatus.DownloadCancelled || entry.status == ModelStatus.NoFound): IconBtn {
                    is-show-tip: true;
                    tip: Logic.tr("redownload");
                    icon: Icons.download;
                    tip-position: Top;
                    hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                    clicked => {
                        Logic.redownload-model(index);
                    }
                }

                IconBtn {
                    is-show-tip: true;
                    tip: Logic.tr("remove");
                    icon: Icons.delete;
                    tip-position: Top;

                    clicked => {
                        ConfirmDialogSetting.set(true, Logic.tr("Warning"), Logic.tr("Remove model or not?"), "remove-model", index);
                    }
                }
            }
        }
    }
}

export component Model inherits VerticalLayout {
    spacing: Theme.spacing * 4;
    padding: Theme.spacing * 2;

    HeadBar { }

    Rectangle {
        border-width: Store.model_entries.length > 0 ? Theme.default-border-width : 0;
        border-color: Theme.base-border-color;
        border-radius: Theme.border-radius;

        if Store.model-entries.length == 0: CenterLayout {
            NoMessageImg {
                width: root.width * Theme.golden-ratio;
                text: Logic.tr("No Model");
            }
        }

        VerticalLayout {
            padding: parent.border-width;

            TableBody { }
        }
    }
}
