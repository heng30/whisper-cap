import { Theme, Icons } from "../theme.slint";
import { Util } from "../util.slint";
import { Logic } from "../logic.slint";
import { Slider } from "slider.slint";
import { IconBtn } from "icon-btn.slint";
import { Label } from "label.slint";
import { TextBtnWithoutIcon } from "btn.slint";
import { MediaControlStatus } from "def.slint";

export component AudioControl inherits Rectangle {
    in-out property <bool> is-playing;
    in-out property <bool> is-hide-tree-control-btns;
    in-out property <bool> is-hide-status-btn;
    in-out property <bool> is-hide-speed-btn;
    in-out property <length> btn-vpadding: Theme.padding * 2;
    in-out property <float> current-speed: 1.0;
    in-out property <float> current-sound: 50;
    in-out property <length> icon-size: Theme.icon-size;
    in-out property <MediaControlStatus> status: MediaControlStatus.Loop;

    in-out property <length> btn-drop-shadow-blur;
    in-out property <color> btn-drop-shadow-color: Theme.base-background-drop-shadow;

    in-out property <length> spacing: Theme.spacing * 4;
    in-out property <length> inner-padding: Theme.spacing * 4;

    in-out property <float> progress;
    in-out property progress-bar-height <=> slider.height;
    in-out property current-time <=> ctime-label.text;
    in-out property end-time <=> etime-label.text;

    callback prev();
    callback next();
    callback play();
    callback stop();
    callback sound-changed(sound: int);
    callback speed-changed(speed: float);
    callback media-control-status-changed(status: MediaControlStatus);
    callback progress-changed <=> slider.changed;
    callback progress-release <=> slider.released;
    callback progress-pressed <=> slider.pressed;

    changed progress => {
        slider.value = progress;
    }

    preferred-width: 500px;

    VerticalLayout {
        spacing: root.spacing;
        padding: inner-padding;

        HorizontalLayout {
            alignment: LayoutAlignment.space-between;

            ctime-label := Label {
                horizontal-alignment: TextHorizontalAlignment.center;
                width: Theme.default-font-size * 3;
                text: "0:00";
            }

            IconBtn {
                visible: !is-hide-status-btn;
                use-auto-size: true;
                show-icon-hover-background: false;
                icon: Util.image-from-media-control-status(root.status);
                icon-size: root.icon-size;

                clicked => {
                    root.status = Util.next-media-control-status(root.status);
                    root.media-control-status-changed(root.status);
                }
            }

            sound-btn := IconBtn {
                use-auto-size: true;
                icon: root.current-sound <= 0 ? Icons.sound-off : Icons.sound-on;
                show-icon-hover-background: false;
                icon-size: root.icon-size;

                clicked => {
                    sound-pop.show();
                }
            }

            speed-btn := TextBtnWithoutIcon {
                visible: !is-hide-speed-btn;
                text: root.current-speed + (root.current-speed == 1.0 || root.current-speed == 2.0 ? ".0x" : "x");
                hpadding: Theme.padding * 2;

                clicked => {
                    speed-pop.show();
                }
            }

            etime-label := Label {
                horizontal-alignment: TextHorizontalAlignment.center;
                width: Theme.default-font-size * 3;
                text: "1:00";
            }
        }

        slider-hbox := HorizontalLayout {
            padding-left: Theme.padding * 2;
            padding-right: Theme.padding * 2;
            spacing: is-hide-tree-control-btns ? Theme.spacing * 4 : 0;

            if is-hide-tree-control-btns: IconBtn {
                icon: root.is-playing ? Icons.audio-stop : Icons.control-start;
                icon-size: root.icon-size * 1.8;

                clicked() => {
                    root.is-playing = !root.is-playing;

                    if (root.is-playing) {
                        root.play();
                    } else {
                        root.stop();
                    }
                }
            }

            VerticalLayout {
                alignment: center;

                slider := Slider {
                    width: root.width - parent.padding-left - parent.padding-right - inner-padding * 2 - (is-hide-tree-control-btns ? Theme.icon-size * 1.8 + slider-hbox.spacing : 0);
                    finished-progress-color: Theme.thirdly-brand-color;
                    height: Theme.default-font-size / 2;
                    indicator-size: self.has-hover ? Theme.icon-size : 0;
                    enable-value-update-progress: true;
                    value: root.progress;
                }
            }
        }

        if !is-hide-tree-control-btns: HorizontalLayout {
            alignment: LayoutAlignment.space-between;

            IconBtn {
                width: root.width * 25%;
                show-icon-hover-background: false;
                icon: Icons.skip-next;
                icon-size: root.icon-size;
                bg-color: Theme.base-background;
                use-auto-size: true;
                icon-rotation-angle: 180deg;
                auto-size-vpadding: root.btn-vpadding;
                drop-shadow-blur: root.btn-drop-shadow-blur;
                drop-shadow-color: root.btn-drop-shadow-color;

                clicked() => {
                    root.prev();
                }
            }

            IconBtn {
                width: root.width * 40%;
                show-icon-hover-background: false;
                icon: root.is-playing ? Icons.audio-stop : Icons.control-start;
                icon-size: root.icon-size;
                bg-color: Theme.base-background;
                use-auto-size: true;
                auto-size-vpadding: root.btn-vpadding;
                drop-shadow-blur: root.btn-drop-shadow-blur;
                drop-shadow-color: root.btn-drop-shadow-color;

                clicked() => {
                    root.is-playing = !root.is-playing;

                    if (root.is-playing) {
                        root.play();
                    } else {
                        root.stop();
                    }
                }
            }

            IconBtn {
                width: root.width * 25%;
                show-icon-hover-background: false;
                icon: Icons.skip-next;
                icon-size: root.icon-size;
                bg-color: Theme.base-background;
                use-auto-size: true;
                auto-size-vpadding: root.btn-vpadding;
                drop-shadow-blur: root.btn-drop-shadow-blur;
                drop-shadow-color: root.btn-drop-shadow-color;

                clicked() => {
                    root.next();
                }
            }
        }
    }

    sound-pop := PopupWindow {
        x: sound-btn.x + sound-btn.preferred-width / 2 + inner-padding - self.width / 2;
        y: -svbox.preferred-height + Theme.padding * 2;
        width: Theme.default-font-size * 4;
        opacity: 0;

        svbox := VerticalLayout {
            spacing: Theme.spacing * 2;
            padding-top: Theme.padding * 4;
            padding-bottom: Theme.padding * 4;

            HorizontalLayout {
                alignment: LayoutAlignment.center;

                sound-lider := Slider {
                    width: Theme.default-font-size;
                    height: Theme.default-font-size * 10;
                    finished-progress-color: Theme.thirdly-brand-color;
                    indicator-size: self.width * 1.33;
                    orientation: Orientation.vertical;
                    value: root.current-sound;

                    changed(v) => {
                        if (root.current-sound == Math.round(v)) {
                            return;
                        }
                        root.current-sound = Math.ceil(v);
                        root.sound-changed(root.current-sound);
                    }
                }
            }
        }
    }

    speed-pop := PopupWindow {
        y: -rec.preferred-height;
        x: speed-btn.x + speed-btn.width / 2 + inner-padding - self.width / 2;
        width: rec.preferred-width + Theme.padding * 4;

        private property <[float]> values: [2.0, 1.75, 1.5, 1.25, 1.0, 0.75, 0.5];

        rec := Rectangle {
            background: Theme.base-background;
            border-width: 1px;
            border-color: Theme.base-border-color;
            border-radius: Theme.border-radius;

            VerticalLayout {
                spacing: Theme.spacing * 2;
                padding: Theme.padding;

                for value[index] in values: Rectangle {
                    background: pop-ta.has-hover ? Theme.hover-background : Theme.base-background;

                    pop-lb := Label {
                        horizontal-alignment: TextHorizontalAlignment.center;
                        overflow: elide;
                        text: value + (value == 1.0 || value == 2.0 ? ".0x" : "x");
                    }

                    pop-ta := TouchArea {
                        clicked => {
                            if (root.current-speed != value) {
                                root.current-speed = value;
                                root.speed-changed(value);
                            }
                        }
                    }
                }
            }
        }
    }
}
